[extruder_stepper tool_0]
extruder:
step_pin: PC13
dir_pin: PF0
enable_pin: !PF1
microsteps: 32
rotation_distance: 23.586109144
gear_ratio: 50:10
full_steps_per_rotation: 200  


[tmc2209 extruder_stepper tool_0]
uart_pin: PE4
interpolate: False
run_current: 0.6
hold_current: 0.1
sense_resistor: 0.110
stealthchop_threshold: 0

[extruder_stepper tool_1]
extruder:
step_pin: PE2
dir_pin: PE3
enable_pin: !PD4
microsteps: 32
rotation_distance: 23.586109144
gear_ratio: 50:10
full_steps_per_rotation: 200


[tmc2209 extruder_stepper tool_1]
uart_pin: PE1
interpolate: False
run_current: 0.6
hold_current: 0.1
sense_resistor: 0.110
stealthchop_threshold: 0


#Filament sensor configurations
[filament_switch_sensor tool_0]
pause_on_runout: False
runout_gcode:
insert_gcode:
event_delay: 3.0
pause_delay: 0.5
switch_pin: ^PG14

[filament_switch_sensor tool_1]
pause_on_runout: False
runout_gcode:
insert_gcode:
event_delay: 3.0
pause_delay: 0.5
switch_pin: ^PG15

[filament_switch_sensor toolhead]
pause_on_runout: False
runout_gcode:
insert_gcode:
event_delay: 0.1
pause_delay: 3.0
switch_pin: ^sb2040:gpio25



[gcode_macro _MMU_VARS]
description: Macro to keep all variables in one place. Doesn't do much else though.

# Variables for loading and unloading the tool head.
variable_load_speed: 30
variable_unload_speed: 30
variable_load_length: 136
variable_load_add_length: 5
variable_unload_length: 110

# Below variables are for loading and unloading filaments from the feeders.
variable_tool_load_speed: 50
variable_tool_load_accel: 100
variable_tool_load_length: 360

variable_tool_unload_speed: 50
variable_tool_unload_accel: 100
variable_tool_unload_length: 360

variable_travel_spd: 200
variable_z_hop_spd: 50
variable_z_hop_height: 5

gcode:




[gcode_macro _MMU_CHANGE_TOOL]
description: Main macro for handling tool changes.
gcode:

  {% set new_tool = params.TOOL|default(0)|int %}
  {% set load_speed = printer['gcode_macro _MMU_VARS'].load_speed %}
  {% set unload_speed = printer['gcode_macro _MMU_VARS'].unload_speed %}
  {% set load_length = printer['gcode_macro _MMU_VARS'].load_length %}
  {% set load_add_length = printer['gcode_macro _MMU_VARS'].load_add_length %}
  {% set unload_length = printer['gcode_macro _MMU_VARS'].unload_length %}
  {% set travel_spd = printer['gcode_macro _MMU_VARS'].travel_spd %}
  {% set old_tool = printer['gcode_macro _TOOL_TRACKER'].old_tool %}

  #SAVE_GCODE_STATE NAME=MMU_STATE

  RESPOND TYPE=command MSG='Current tool is:{old_tool}'
  RESPOND TYPE=command MSG='Selected tool is:{new_tool}'
  SET_PRESSURE_ADVANCE EXTRUDER={printer.toolhead.extruder} ADVANCE=0 
  SET_PRESSURE_ADVANCE EXTRUDER=tool_{new_tool} ADVANCE=0 

  #Check to see if the toolhead is loaded with some unknown tool before trying to load tool
  {% if printer['filament_switch_sensor toolhead'].filament_detected and old_tool == 99 %}

    RESPOND TYPE=error MSG='Unknown tool loaded in toolhead!'

  {% endif %}

  #Check to see if a known tool is loaded into the tool head and eject it
  {% if printer['filament_switch_sensor toolhead'].filament_detected and old_tool < 99 and new_tool != old_tool %}

    RESPOND TYPE=command MSG='Unloading Tool{old_tool}'
    SYNC_EXTRUDER_MOTION EXTRUDER=tool_{old_tool} MOTION_QUEUE={printer.toolhead.extruder}

    #Unload old tool
    CUT_FILAMENT
    G92 E0
    G1 E-{unload_length} F{unload_speed*60}
    G92 E0
    M400

    SYNC_EXTRUDER_MOTION EXTRUDER=tool_{old_tool} MOTION_QUEUE=

    #Load new tool
    RESPOND TYPE=command MSG='Loading tool {new_tool}'
    SYNC_EXTRUDER_MOTION EXTRUDER=tool_{new_tool} MOTION_QUEUE={printer.toolhead.extruder}

    G92 E0
    G1 E{load_length} F{load_speed*60}
    G92 E0
    M400
    
    SET_GCODE_VARIABLE MACRO=_TOOL_TRACKER VARIABLE=old_tool VALUE={new_tool}

    {% if printer['filament_switch_sensor toolhead'].filament_detected %}
      RESPOND TYPE=command MSG='Tool {new_tool} Loaded!'
    {% else%}
      RESPOND TYPE=error MSG='Tool {new_tool} failed to load!'
      #ADD PAUSE GCODE HERE AT SOME POINT
    {% endif %}

  {% elif old_tool != 99 %}
    RESPOND TYPE=error MSG='Tool {old_tool} Already Loaded!!!'
  {% endif %}

  
  #Check to see if toolhead is empty and load new tool
  {% if not printer['filament_switch_sensor toolhead'].filament_detected %}

    RESPOND TYPE=command MSG='Loading tool {new_tool}'
    SYNC_EXTRUDER_MOTION EXTRUDER=tool_{new_tool} MOTION_QUEUE={printer.toolhead.extruder}

    G92 E0
    G1 E{load_length + load_add_length} F{load_speed*60}
    G92 E0
    M400

    SET_GCODE_VARIABLE MACRO=_TOOL_TRACKER VARIABLE=old_tool VALUE={new_tool}
    RESPOND TYPE=command MSG='Tool {new_tool} Loaded!'

  {% endif %}

  SET_PRESSURE_ADVANCE EXTRUDER={printer.toolhead.extruder} ADVANCE={printer.configfile.settings.extruder.pressure_advance} SMOOTH_TIME={printer.configfile.settings.extruder.pressure_advance_smooth_time}
  SET_PRESSURE_ADVANCE EXTRUDER=tool_{new_tool} ADVANCE={printer.configfile.settings.extruder.pressure_advance} SMOOTH_TIME={printer.configfile.settings.extruder.pressure_advance_smooth_time}
  #RESTORE_GCODE_STATE NAME=MMU_STATE MOVE=1 #MOVE_SPEED={travel_spd}




[gcode_macro MMU_EJECT]
description: Macro used to eject filamnent from the tool head.
gcode:
    {% set unload_speed = printer['gcode_macro _MMU_VARS'].unload_speed %}
    {% set unload_length = printer['gcode_macro _MMU_VARS'].unload_length %}
    {% set old_tool = printer['gcode_macro _TOOL_TRACKER'].old_tool %}
    {% set tool = params.TOOL|default(0)|int %}

    {% if printer['filament_switch_sensor toolhead'].filament_detected and old_tool != 99 %}

      # Eject filament currently loaded
      SET_PRESSURE_ADVANCE EXTRUDER={printer.toolhead.extruder} ADVANCE=0 
      SET_PRESSURE_ADVANCE EXTRUDER=tool_{old_tool} ADVANCE=0 

      RESPOND TYPE=command MSG='Unloading Tool {old_tool}'
      SYNC_EXTRUDER_MOTION EXTRUDER=tool_{old_tool} MOTION_QUEUE={printer.toolhead.extruder}

      CUT_FILAMENT
      G92 E0
      G1 E-{unload_length} F{unload_speed*60}
      G92 E0
      M400

      SYNC_EXTRUDER_MOTION EXTRUDER=tool_{old_tool} MOTION_QUEUE=
      SET_GCODE_VARIABLE MACRO=_TOOL_TRACKER VARIABLE=old_tool VALUE=99
      SET_PRESSURE_ADVANCE EXTRUDER={printer.toolhead.extruder} ADVANCE={printer.configfile.settings.extruder.pressure_advance} SMOOTH_TIME={printer.configfile.settings.extruder.pressure_advance_smooth_time}
      SET_PRESSURE_ADVANCE EXTRUDER=tool_{old_tool} ADVANCE={printer.configfile.settings.extruder.pressure_advance} SMOOTH_TIME={printer.configfile.settings.extruder.pressure_advance_smooth_time}
      RESPOND TYPE=command MSG='Tool {old_tool} unloaded!'

    {% elif printer['filament_switch_sensor toolhead'].filament_detected %}

      # Eject filament specified by user, default is going to be tool 0 if not specified
      SET_PRESSURE_ADVANCE EXTRUDER={printer.toolhead.extruder} ADVANCE=0 
      SET_PRESSURE_ADVANCE EXTRUDER=tool_{tool} ADVANCE=0 

      RESPOND TYPE=command MSG='Unloading Tool {tool}'
      SYNC_EXTRUDER_MOTION EXTRUDER=tool_{tool} MOTION_QUEUE={printer.toolhead.extruder}

      CUT_FILAMENT
      G92 E0
      G1 E-{unload_length} F{unload_speed*60}
      G92 E0
      M400

      SYNC_EXTRUDER_MOTION EXTRUDER=tool_{tool} MOTION_QUEUE=
      SET_GCODE_VARIABLE MACRO=_TOOL_TRACKER VARIABLE=old_tool VALUE=99
      SET_PRESSURE_ADVANCE EXTRUDER={printer.toolhead.extruder} ADVANCE={printer.configfile.settings.extruder.pressure_advance} SMOOTH_TIME={printer.configfile.settings.extruder.pressure_advance_smooth_time}
      SET_PRESSURE_ADVANCE EXTRUDER=tool_{tool} ADVANCE={printer.configfile.settings.extruder.pressure_advance} SMOOTH_TIME={printer.configfile.settings.extruder.pressure_advance_smooth_time}
      RESPOND TYPE=command MSG='Tool {tool} unloaded!'

    {% else %}
      RESPOND TYPE=error MSG='No filament detected to unload!'
    {% endif %}

    

[gcode_macro MMU_MOVE_TOOL]
description: Manually move a tool.
gcode:
  {% set TOOL = params.TOOL|default(0)|string %}
  {% set LENGTH = params.LENGTH|default(100)|int %}
  {% set SPEED = params.SPEED|default(50)|int %}

  MANUAL_STEPPER stepper={"tool_"+TOOL} enable=1 set_position=0 speed={SPEED} accel=50 move={LENGTH}
  MANUAL_STEPPER stepper={"tool_"+TOOL} enable= set_position=0


[gcode_macro MMU_TOOL_CALIB]
description: Macro used to figure out tool load distance.
gcode:
  {% set TOOL = params.TOOL|default(0)|string %}
  {% set LENGTH = params.LENGTH|default(100)|int %}
  {% set SPEED = params.SPEED|default(50)|int %}

  MANUAL_STEPPER stepper={"tool_"+TOOL} enable=1  speed={SPEED} accel=50 move={LENGTH}



[gcode_macro MMU_CALC_ROTATION_DISTANCE]
description: Macro to calc rotation distance.
# Usage MMU_CALC_ROTATION_DISTANCE TOOL=<tool number/extruder> OLD=<old roation value if you did not specify a tool> ACTUAL_LENGTH=<measured length of filament> TARGET_LENGTH=<target_length, default 100mm>
gcode:
  {% set TOOL = params.TOOL|default(99)|string %}
  {% set OLD = params.OLD|default(0)|float %}
  {% set ACTUAL_LENGTH = params.ACTUAL_LENGTH|default(100)|float %}
  {% set TARGET_LENGTH = params.TARGET_LENGTH|default(100)|float %}
   
  {% if TOOL == '0' %}
    RESPOND TYPE=command MSG='Old rotation distance was: {printer.configfile.settings['manual_extruder_stepper tool_0'].rotation_distance}'
    RESPOND TYPE=command MSG='New rotation distance is: {printer.configfile.settings['manual_extruder_stepper tool_0'].rotation_distance*(ACTUAL_LENGTH/TARGET_LENGTH)}'
    RESPOND TYPE=command MSG='Replace your old rotation distance with the new rotation distance in your config file.'
  {% elif TOOL == '1' %}
    RESPOND TYPE=command MSG='Old rotation distance was: {printer.configfile.settings['manual_extruder_stepper tool_1'].rotation_distance}'
    RESPOND TYPE=command MSG='New rotation distance is: {printer.configfile.settings['manual_extruder_stepper tool_1'].rotation_distance*(ACTUAL_LENGTH/TARGET_LENGTH)}'
    RESPOND TYPE=command MSG='Replace your old rotation distance with the new rotation distance in your config file.'
  {% elif TOOL == '2' %}
    RESPOND TYPE=command MSG='Old rotation distance was: {printer.configfile.settings['manual_extruder_stepper tool_2'].rotation_distance}'
    RESPOND TYPE=command MSG='New rotation distance is: {printer.configfile.settings['manual_extruder_stepper tool_2'].rotation_distance*(ACTUAL_LENGTH/TARGET_LENGTH)}'
    RESPOND TYPE=command MSG='Replace your old rotation distance with the new rotation distance in your config file.'
  {% elif TOOL == '3' %}
    RESPOND TYPE=command MSG='Old rotation distance was: {printer.configfile.settings['manual_extruder_stepper tool_3'].rotation_distance}'
    RESPOND TYPE=command MSG='New rotation distance is: {printer.configfile.settings['manual_extruder_stepper tool_3'].rotation_distance*(ACTUAL_LENGTH/TARGET_LENGTH)}'
    RESPOND TYPE=command MSG='Replace your old rotation distance with the new rotation distance in your config file.'
  {% elif TOOL == 'extruder' %}
    RESPOND TYPE=command MSG='Old rotation distance was: {printer.configfile.settings.extruder.rotation_distance}'
    RESPOND TYPE=command MSG='New rotation distance is: {printer.configfile.settings.extruder.rotation_distance*(ACTUAL_LENGTH/TARGET_LENGTH)}'
    RESPOND TYPE=command MSG='Replace your old rotation distance with the new rotation distance in your config file.'
  {% else %}
    RESPOND TYPE=command MSG='Old rotation distance was: {OLD}'
    RESPOND TYPE=command MSG='New rotation distance is: {OLD*(ACTUAL_LENGTH/TARGET_LENGTH)}'
    RESPOND TYPE=command MSG='Replace your old rotation distance with the new rotation distance in your config file.'
  {% endif %}



[gcode_macro MMU_LOAD_TOOL]
description: Macro used to load filament to splitter.
gcode:
  {% set TOOL = params.TOOL|default(0)|string %}
  {% set load_speed = printer['gcode_macro _MMU_VARS'].tool_load_speed %}
  {% set load_accel = printer['gcode_macro _MMU_VARS'].tool_load_accel %}
  {% set load_length = printer['gcode_macro _MMU_VARS'].tool_load_length %}

  MANUAL_STEPPER stepper={"tool_"+TOOL} enable=1 set_position=0 speed={load_speed} accel={load_accel} move={load_length}
  MANUAL_STEPPER stepper={"tool_"+TOOL} enable=0 set_position=0
  RESPOND TYPE=command MSG='Tool {TOOL} Loaded!'




[gcode_macro MMU_UNLOAD_TOOL]
description: Macro used to unload filament.
gcode:
  {% set TOOL = params.TOOL|default(0)|string %}
  {% set unload_speed = printer['gcode_macro _MMU_VARS'].tool_unload_speed %}
  {% set unload_accel = printer['gcode_macro _MMU_VARS'].tool_unload_accel %}
  {% set unload_length = printer['gcode_macro _MMU_VARS'].tool_unload_length %}

  MANUAL_STEPPER stepper={"tool_"+TOOL} enable=1 set_position=0 speed={unload_speed} accel={unload_accel} move=-{unload_length}
  MANUAL_STEPPER stepper={"tool_"+TOOL} enable=0 set_position=0
  RESPOND TYPE=command MSG='Tool {TOOL} Unloaded!'


[gcode_macro T0]
gcode: _MMU_CHANGE_TOOL TOOL=0


[gcode_macro T1]
gcode: _MMU_CHANGE_TOOL TOOL=1




[gcode_macro CUT_FILAMENT]
description: Cut filament by pressing the cutter on a fixed pin with a horizontal movement.

# Distance to retract prior to making the cut, this reduces wasted filament but might cause clog 
# if set too large and/or if there are gaps in the hotend assembly 
# This must be less than the distance from the nozzle to the cutter.
variable_retract_length: 25

# The location of the pin, this should be the position of the toolhead when the cutter 
# just lightly touches the pin
variable_pin_loc_x: 13.54
variable_pin_loc_y: 250

# The starting and end positions when making the cut
# In particular, instead of making the cut by traveling to the pin location above, 
# we leave a small safety margin along X-axis to avoid scratching on the pin when traveling
# This should also give a small distance to produce some momentum when pressing on the pin 
variable_pin_park_x_dist: 5.0

# Position of the toolhead when the cutter is fully compressed
# Should leave a small headroom to avoid banging the toolhead or gantry
variable_pin_loc_x_compressed: 5

# Speed related settings
# Note that if the cut speed is too fast, the steppers can lose steps
# Therefore, for a cut: 
# - We first make a fast move to accumulate some momentum and get the cut blade to the initial contact with the filament
# - We then make a slow move for the actual cut to happen 
variable_travel_spd: 400
variable_extruder_speed: 30
variable_cut_fast_move_spd: 50
variable_cut_slow_move_spd: 25
variable_evacuate_speed: 400
variable_cut_dwell_time: 100 # time to dwell at the cut point in ms
variable_cut_fast_move_fraction: 0.5 # fraction of the move that uses fast move 

# Safety margin for fast vs slow travel
# When traveling to the pin location, we make a safer but longer move if we closer to the pin than this specified margin
# Usually setting these to the size of the toolhead (plus a small margin) should be good enough 
variable_safe_margin_x: 30
variable_safe_margin_y: 30

#This is the distance to retract the filament after the cut and pushing the filament tip back down. This should be the same distance as variable_retract_length:
variable_cut_retract_length: 25

gcode:
    {% set RETRACT_LENGTH = params.RETRACT_LENGTH | default(printer['gcode_macro CUT_FILAMENT']['retract_length']) | float %}
    {% set pin_park_x_loc = pin_loc_x + pin_park_x_dist %}
    {% set pin_park_y_loc = pin_loc_y %}
    {% set fast_slow_transition_loc = (pin_loc_x_compressed - pin_park_x_loc) * cut_fast_move_fraction + pin_park_x_loc | float %}
    {% set current_loc_x = printer.gcode_move.gcode_position.x %}
    {% set current_loc_y = printer.gcode_move.gcode_position.y %}

    SAVE_GCODE_STATE NAME=cut_filament_state
    
    {% if ("x" not in printer.toolhead.homed_axes) or ("y" not in printer.toolhead.homed_axes) %}
        G28 X Y
    {% endif %}

    G90

    {% if RETRACT_LENGTH > 0 %}
      G92 E0
      G1 E-{RETRACT_LENGTH} F{extruder_speed*60} # retract to save filament waste
      G92 E0
    {% endif %}

    # Move to cutter
    {% if ((printer.gcode_move.gcode_position.x - pin_park_x_loc) | abs < safe_margin_x) or ((printer.gcode_move.gcode_position.y - pin_park_y_loc | float) | abs < safe_margin_y) %}
      # Make a safe but slower travel move
      G1 X{pin_park_x_loc} F{travel_spd*60}
      G1 Y{pin_park_y_loc} F{travel_spd*60}
    {% else %}
      G1 X{pin_park_x_loc} Y{pin_park_y_loc} F{travel_spd*60}
    {% endif %}

    # Make the cut
    G1 X{fast_slow_transition_loc} F{cut_fast_move_spd*60} # make a fast move to initiate contact of the blade with the filament
    G1 X{pin_loc_x_compressed} F{cut_slow_move_spd*60} # do the cut in slow move
    G4 P{cut_dwell_time}
    G1 X{pin_park_x_loc} F{evacuate_speed*60} # evacuate
  
    {% if RETRACT_LENGTH > 0 %}
      G92 E0
      G1 E{RETRACT_LENGTH-1} F{extruder_speed*60} #Pushes filament tip back down so it doesn't get stuck
      G92 E0
      G1 E-{cut_retract_length} F{extruder_speed*60} #moves filament back to cutter
      G92 E0
    {% endif %}
   
    #M400 # ensures all commands are finished before restoring gcode state.
    M117 Filament cut!
    RESTORE_GCODE_STATE NAME=cut_filament_state MOVE=1 MOVE_SPEED={travel_spd} 







[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}



[force_move]
enable_force_move: True 

[respond]
default_type: echo

[gcode_macro _TOOL_TRACKER]
description: Keeps track of current tool loaded.
variable_old_tool=99
gcode: